<template>
	<view>
		<u-empty :show="agentList.length==0" mode="data" icon="/static/agent.png" text="暂无智能体">
		</u-empty>
		<!-- 微信公众号关注组件，仅在微信小程序环境下显示 -->
		<view v-if="isMpWeixin" style="margin: 20rpx 0;">
			<official-account />
		</view>
		<view class="container">
			<!-- 用户卡片循环 -->
			<view class="card"  v-for="(agent, index) in agentList" :key="index">
				<!-- 卡片头部 -->
				<view class="header">
					<text class="name">{{ agent.agentName }}</text>
					<view class="header-actions">
						<view class="device-tag" @click="showDeviceList(agent.id)">
							设备管理({{ agent.deviceCount }})
						</view>
						<view class="device-tag" @click="showChatHistory(agent.id)">
							成长报告
						</view>
						<u-icon name="trash" color="#f56c6c" size="28" @click="onDeleteAgent(agent.id, index)"></u-icon>
					</view>
				</view>

				<!-- 用户信息 -->
				<view class="info" @click="onEditAgent(index)">
					<text>小主：{{ agent.nickName }}</text>
					<text>年龄：{{ getAge(agent.birthday) }}</text>
				</view>
			</view>
		</view>
		<u-popup :show="showAddAgent" :closeOnClickOverlay="false" :closeable="true" :safeAreaInsetTop="true"
			@close="closeAddAgent" @open="openAddAgent">
			<view>
				<!-- 注意，如果需要兼容微信小程序，最好通过setRules方法设置rules规则 -->
				<u--form labelPosition="left" labelWidth="100" :model="agent" labelAlign="right" ref="uForm"
					:rules="rules" style="margin-left: 10px">
					<u-form-item :required="true" label="智能体名称" prop="agentName" borderBottom>
						<u--input v-model="agent.agentName" placeholder="请输入智能体名称" border="none"></u--input>
					</u-form-item>
					<u-form-item label="小主名称" prop="nickName" borderBottom>
						<u--input v-model="agent.nickName" placeholder="请输入小主人名称" border="none"></u--input>
					</u-form-item>
					<u-form-item label="生日" prop="birthday" @click="showBirthday = true;" borderBottom>
						<u--input v-model="agent.birthday" disabled disabledColor="#ffffff" placeholder="请选择生日"
							border="none"></u--input>
					</u-form-item>
					<u-form-item label="性别" prop="sex" borderBottom>
						<u-radio-group placement="row" v-model="agent.sex">
							<u-radio v-for="(item, index) in sex" :key="index" :label="item.name" :name="item.value">
							</u-radio>
						</u-radio-group>
					</u-form-item>
					<u-form-item label="会员等级" borderBottom>
						<u--text type="primary" text="限时免费"></u--text>
					</u-form-item>
				</u--form>
				<view style="padding: 20px;">
					<u-button type="primary" icon="plus" text="保存" @click="submit"></u-button>
				</view>
			</view>
		</u-popup>
		<view style="padding: 20px;">
			<u-button type="primary" icon="plus" text="新建智能体" @click="showAddAgent=true"></u-button>
		</view>
		<u-datetime-picker :show="showBirthday" v-model="birthday" mode="date" :maxDate="new Date().getTime()"
			:minDate="315522000000" :formatter="formatter" ref="datetimePicker" @confirm="selectBirthday"
			@cancel="birthdayClose" @close="birthdayClose"></u-datetime-picker>
		<u-toast ref="uToast"></u-toast>
		<u-overlay :show="$store.state.request_count>0">
			<view class="warp">
				<view class="rect" @tap.stop>
					<u-loading-page :loading="true" loadingMode="circle" bgColor="rgba(50 50 50 / 31%)">
					</u-loading-page>
				</view>
			</view>
		</u-overlay>
		<u-tabbar :value="0" @change="name => tabbar.value = name">
			<u-tabbar-item v-for="item in tabbar.items" :key="item.name" :badge="item.badge" :name="item.name"
				:text="item.text" :icon="item.icon" @click="onClick"></u-tabbar-item>
		</u-tabbar>
	</view>
</template>

<script>
	import constants from '@/common/constants.js';
	import {
		agentList,
		updateAgent,
		addAgent,
		deleteAgent
	} from '@/config/api.js';
	export default {
		data() {
			return {
				tabbar: constants.tabbar,
				sex: constants.sex,
				agentList: [],
				agent: {
					agentId: '',
					agentName: '',
					nickName: '',
					sex: '',
					birthday: '',
				},
				birthday: '2020-01-01',
				showAddAgent: false,
				showBirthday: false,
				showEditAgent: false, // 新增：编辑弹窗状态
				editAgentIndex: null, // 新增：当前编辑的agent索引
				isMpWeixin: false, // 新增：是否为微信小程序
				rules: {
					'agentName': {
						type: 'string',
						required: true,
						message: '请输入智能体名称',
						trigger: ['blur', 'change']
					},
					'birthday': {
						type: 'string',
						required: true,
						message: '请选择生日',
						trigger: ['blur', 'change']
					},
					'nickName': {
						type: 'string',
						required: true,
						message: '请输入小主人名称',
						trigger: ['blur', 'change']
					},
					'sex': {
						type: 'string',
						max: 1,
						required: true,
						message: '请选择性别',
						trigger: ['blur', 'change']
					},
				},
			}
		},
		onLoad(option) {
			// Detect platform
			let platform = '';
			try {
				platform = uni.getSystemInfoSync().platform;
			} catch (e) {}
			// For mp-weixin, platform is 'mp-weixin' or 'weixin' depending on build
			this.isMpWeixin = (platform === 'mp-weixin' || platform === 'weixin');

			this.$nextTick(() => {
				if (this.$refs.datetimePicker && this.$refs.datetimePicker.setFormatter) {
					this.$refs.datetimePicker.setFormatter(this.formatter)
				}
				if (this.$refs.uForm && this.$refs.uForm.setRules) {
					this.$refs.uForm.setRules(this.rules)
				}
			})
			if (option && option.code && option.code != '') {
				login({
					"mode": "wechat",
					"code": option.code
				})
			}
			agentList({
				params: {}
			}).then((data) => {
				console.log(data)
				this.agentList = data

			})
		},
		methods: {
			onClick: constants.reload,
			formatter(type, value) {
				if (type === 'year') {
					return `${value}年`
				}
				if (type === 'month') {
					return `${value}月`
				}
				if (type === 'day') {
					return `${value}日`
				}
				return value
			},
			selectBirthday(v) {
				console.log(v)
				this.showBirthday = false;
				this.agent.birthday = uni.$u.timeFormat(v.value, 'yyyy-mm-dd')
				this.$refs.uForm.validateField('birthday')
			},
			openAddAgent() {
				if (this.showEditAgent === false) {
					this.agent = {
						agentId: '',
						agentName: '',
						nickName: '',
						sex: '',
						birthday: '',
						};
					this.showEditAgent = false;
					this.editAgentIndex = null;
					this.$refs.uForm.clearValidate();
				}
			},
			closeAddAgent() {
				this.showAddAgent = false;
				this.showEditAgent = false;
				this.editAgentIndex = null;
				this.agent = {
					agentId: '',
					agentName: '',
					nickName: '',
					sex: '',
					birthday: '',
				};
			},
			openEditAgent() {
				this.showEditAgent = true;
				this.$nextTick(() => {
					if (this.$refs.uForm && this.$refs.uForm.setRules) {
						this.$refs.uForm.setRules(this.rules)
					}
					if (this.$refs.uForm) {
						this.$refs.uForm.clearValidate();
					}
				});
			},
			// 新增：点击卡片编辑
			onEditAgent(index) {
				const agent = this.agentList[index];
				this.agent = {
					agentId: agent.id,
					agentName: agent.agentName,
					nickName: agent.nickName,
					sex: agent.sex,
					birthday: agent.birthday,
				};

				this.showAddAgent = true;
				this.showEditAgent = true;
				this.editAgentIndex = index;
				this.$nextTick(() => {
					if (this.$refs.uForm && this.$refs.uForm.setRules) {
						this.$refs.uForm.setRules(this.rules)
					}
					if (this.$refs.uForm) {
						this.$refs.uForm.clearValidate();
					}
				});
			},
			// 修改submit方法，支持编辑和新建
			submit() {
				this.$refs.uForm.validate().then(res => {
					if (this.showEditAgent) {
						// 编辑模式，调用更新接口
						updateAgent({
							agentId: this.agent.agentId,
							agentName: this.agent.agentName,
							nickName: this.agent.nickName,
							sex: this.agent.sex,
							birthday: this.agent.birthday
						}).then((data) => {
							this.showAddAgent = false;
							this.showEditAgent = false;
							this.editAgentIndex = null;
							agentList({ params: {} }).then((data) => {
								this.agentList = data;
							});
						});
					} else {
						// 新建模式
						addAgent(this.agent).then((data) => {
							this.showAddAgent = false;
							agentList({ params: {} }).then((data) => {
								this.agentList = data;
							});
						});
					}
				}).catch(errors => {});
			},
			birthdayClose() {
				this.showBirthday = false
				this.$refs.uForm.validateField('birthday')
			},
			showDeviceList(id) {
				uni.$u.route({
					type: 'navigateTo',
					url: '/pages/index/device_list',
					params: {
						agentId: id
					}
				})
			},
			showChatHistory(id) {
				uni.$u.route({
					type: 'navigateTo',
					url: '/pages/index/session-list',
					params: {
						agentId: id
					}
				})
			},
			getAge(birthday) {
				if (!birthday) return '';
				// 兼容 yyyy-mm-dd 或 yyyy/MM/dd
				let parts = birthday.split(/[-\/]/);
				if (parts.length < 3) return '';
				let birthYear = parseInt(parts[0]);
				let birthMonth = parseInt(parts[1]);
				let birthDay = parseInt(parts[2]);
				if (isNaN(birthYear) || isNaN(birthMonth) || isNaN(birthDay)) return '';
				// 当前日期
				let now = new Date(2025, 4, 31); // 2025年5月31日, 月份从0开始
				let year = now.getFullYear() - birthYear;
				let month = now.getMonth() + 1 - birthMonth;
				if (month < 0) {
					year--;
					month += 12;
				}
				// 处理天数，如果本月还没到生日，月数减1
				if (now.getDate() < birthDay) {
					month--;
					if (month < 0) {
						year--;
						month += 12;
					}
				}
				if (year < 0) return '';
				return `${year}岁${month}月`;
			},
			// 新增：删除智能体
			async onDeleteAgent(id, index) {
				const agent = this.agentList[index];
				if (agent.deviceCount > 0) {
					uni.$u.toast('请先解绑该智能体下的所有设备后再删除');
					return;
				}
				const that = this;
				uni.showModal({
					title: '确认删除',
					content: '确定要删除该智能体吗？',
					success(res) {
						if (res.confirm) {
							deleteAgent({ agentId: id }).then(() => {
								that.agentList.splice(index, 1);
								uni.$u.toast('删除成功');
							});
						}
					}
				});
			},
		},
		// 新增：监听页面设备数量变化
		onShow() {
			if (!this._deviceCountListener) {
				this._deviceCountListener = ({ agentId, count }) => {
					const agent = this.agentList.find(a => a.id === agentId);
					if (agent) {
						agent.deviceCount = count;
					}
				};
				uni.$on('deviceCountChanged', this._deviceCountListener);
			}
		},
		onUnload() {
			if (this._deviceCountListener) {
				uni.$off('deviceCountChanged', this._deviceCountListener);
				this._deviceCountListener = null;
			}
		},
	}
</script>

<style lang="scss">
	.u-page__text-item {
		margin-right: 10px;
		flex: 1;
	}

	.container {
		padding: 20rpx;
		background-color: #f5f5f5;
	}

	.card {
		background: #fff;
		border-radius: 12rpx;
		padding: 24rpx;
		margin-bottom: 20rpx;
		box-shadow: 0 2rpx 12rpx rgba(0, 0, 0, 0.05);

		.header {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 20rpx;
			position: relative;
		}

		.name {
			font-size: 32rpx;
			font-weight: bold;
			flex: 1;
			text-align: left;
			display: flex;
			align-items: center;
		}

		.header-actions {
			display: flex;
			flex-direction: row;
			align-items: center;
			gap: 16rpx;
		}

		.device-tag {
			color: #1890ff;
			font-size: 26rpx;
			font-weight: bold;
			display: flex;
			align-items: center;
		}

		.u-icon {
			margin-left: 12rpx;
			position: static;
		}

		.info {
			margin-bottom: 24rpx;
			font-size: 26rpx;
			color: #666;
			line-height: 1.6;
		}

		.buttons {
			display: flex;
			justify-content: space-between;
			/* 或 space-around */
			gap: 15rpx;
			/* 按钮间距 */
		}
	}
</style>